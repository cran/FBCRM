// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// abs1
double abs1(double a);
RcppExport SEXP _FBCRM_abs1(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(abs1(a));
    return rcpp_result_gen;
END_RCPP
}
// min1
double min1(double a, double b);
RcppExport SEXP _FBCRM_min1(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(min1(a, b));
    return rcpp_result_gen;
END_RCPP
}
// max1
double max1(double a, double b);
RcppExport SEXP _FBCRM_max1(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(max1(a, b));
    return rcpp_result_gen;
END_RCPP
}
// upper_bound
int upper_bound(arma::vec zeta, int a);
RcppExport SEXP _FBCRM_upper_bound(SEXP zetaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_bound(zeta, a));
    return rcpp_result_gen;
END_RCPP
}
// lower_bound
int lower_bound(arma::vec zeta, int a);
RcppExport SEXP _FBCRM_lower_bound(SEXP zetaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_bound(zeta, a));
    return rcpp_result_gen;
END_RCPP
}
// GetBoundaries_p
arma::vec GetBoundaries_p(int m, arma::vec p, arma::vec zeta);
RcppExport SEXP _FBCRM_GetBoundaries_p(SEXP mSEXP, SEXP pSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBoundaries_p(m, p, zeta));
    return rcpp_result_gen;
END_RCPP
}
// TruncNormal_p
double TruncNormal_p(int m, arma::vec p, double c1, arma::vec zeta);
RcppExport SEXP _FBCRM_TruncNormal_p(SEXP mSEXP, SEXP pSEXP, SEXP c1SEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(TruncNormal_p(m, p, c1, zeta));
    return rcpp_result_gen;
END_RCPP
}
// q_beta
double q_beta(double X, double a, double b);
RcppExport SEXP _FBCRM_q_beta(SEXP XSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(q_beta(X, a, b));
    return rcpp_result_gen;
END_RCPP
}
// myFac
double myFac(double x);
RcppExport SEXP _FBCRM_myFac(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(myFac(x));
    return rcpp_result_gen;
END_RCPP
}
// GammaFn
double GammaFn(double z);
RcppExport SEXP _FBCRM_GammaFn(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(GammaFn(z));
    return rcpp_result_gen;
END_RCPP
}
// BetaCDF
double BetaCDF(double z, double a, double b);
RcppExport SEXP _FBCRM_BetaCDF(SEXP zSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(BetaCDF(z, a, b));
    return rcpp_result_gen;
END_RCPP
}
// QBeta
double QBeta(double q, double a, double b);
RcppExport SEXP _FBCRM_QBeta(SEXP qSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(QBeta(q, a, b));
    return rcpp_result_gen;
END_RCPP
}
// TruncBeta
double TruncBeta(int m, arma::vec p, arma::vec zeta, double a, double b);
RcppExport SEXP _FBCRM_TruncBeta(SEXP mSEXP, SEXP pSEXP, SEXP zetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(TruncBeta(m, p, zeta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// samp1
double samp1(double p);
RcppExport SEXP _FBCRM_samp1(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(samp1(p));
    return rcpp_result_gen;
END_RCPP
}
// VEC
Rcpp::IntegerVector VEC(double p);
RcppExport SEXP _FBCRM_VEC(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(VEC(p));
    return rcpp_result_gen;
END_RCPP
}
// SampBinom
int SampBinom(int samp, double prob);
RcppExport SEXP _FBCRM_SampBinom(SEXP sampSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type samp(sampSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(SampBinom(samp, prob));
    return rcpp_result_gen;
END_RCPP
}
// getmin
double getmin(arma::vec dose);
RcppExport SEXP _FBCRM_getmin(SEXP doseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type dose(doseSEXP);
    rcpp_result_gen = Rcpp::wrap(getmin(dose));
    return rcpp_result_gen;
END_RCPP
}
// optdose
int optdose(arma::vec dose, double mtd);
RcppExport SEXP _FBCRM_optdose(SEXP doseSEXP, SEXP mtdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type dose(doseSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    rcpp_result_gen = Rcpp::wrap(optdose(dose, mtd));
    return rcpp_result_gen;
END_RCPP
}
// LFBCRM1
double LFBCRM1(arma::vec X, arma::vec Y, arma::vec p, double alpha);
RcppExport SEXP _FBCRM_LFBCRM1(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(LFBCRM1(X, Y, p, alpha));
    return rcpp_result_gen;
END_RCPP
}
// Lbeta1
double Lbeta1(arma::vec p, arma::vec a, arma::vec b, arma::vec zeta);
RcppExport SEXP _FBCRM_Lbeta1(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Lbeta1(p, a, b, zeta));
    return rcpp_result_gen;
END_RCPP
}
// randbeta
double randbeta(double m, double s);
RcppExport SEXP _FBCRM_randbeta(SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(randbeta(m, s));
    return rcpp_result_gen;
END_RCPP
}
// randnorm
double randnorm(double mu, double sigma);
RcppExport SEXP _FBCRM_randnorm(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(randnorm(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// non_zero
int non_zero(arma::vec X);
RcppExport SEXP _FBCRM_non_zero(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(non_zero(X));
    return rcpp_result_gen;
END_RCPP
}
// LM
double LM(arma::vec pi, arma::vec a, arma::vec b, arma::vec X, arma::vec zeta);
RcppExport SEXP _FBCRM_LM(SEXP piSEXP, SEXP aSEXP, SEXP bSEXP, SEXP XSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(LM(pi, a, b, X, zeta));
    return rcpp_result_gen;
END_RCPP
}
// LCRM
double LCRM(arma::vec X, arma::vec Y, arma::vec p, double alpha);
RcppExport SEXP _FBCRM_LCRM(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(LCRM(X, Y, p, alpha));
    return rcpp_result_gen;
END_RCPP
}
// LCRM_1D
double LCRM_1D(double x, double y, double p, double al);
RcppExport SEXP _FBCRM_LCRM_1D(SEXP xSEXP, SEXP ySEXP, SEXP pSEXP, SEXP alSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type al(alSEXP);
    rcpp_result_gen = Rcpp::wrap(LCRM_1D(x, y, p, al));
    return rcpp_result_gen;
END_RCPP
}
// dn
double dn(double sigma, double alpha);
RcppExport SEXP _FBCRM_dn(SEXP sigmaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dn(sigma, alpha));
    return rcpp_result_gen;
END_RCPP
}
// area
double area(arma::vec X, arma::vec Y, arma::vec p, double sigma, double a, double b, double n);
RcppExport SEXP _FBCRM_area(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(area(X, Y, p, sigma, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// areap
arma::vec areap(arma::vec X, arma::vec Y, arma::vec p, double sigma, double a, double b, double n);
RcppExport SEXP _FBCRM_areap(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(areap(X, Y, p, sigma, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// areap_d1
double areap_d1(arma::vec X, arma::vec Y, arma::vec p, double sigma, double mtd, double a, double b, double n);
RcppExport SEXP _FBCRM_areap_d1(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(areap_d1(X, Y, p, sigma, mtd, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// CRM_MCMC
List CRM_MCMC(arma::vec X, arma::vec Y, arma::vec p, double sigma, double mtd, double a, double b, double n);
RcppExport SEXP _FBCRM_CRM_MCMC(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(CRM_MCMC(X, Y, p, sigma, mtd, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// CRM_RUNTRIAL
List CRM_RUNTRIAL(int cohort, int samp, arma::vec ptrue, arma::vec p, double sigma, double mtd, int M, double p_u, double a, double b, double n);
RcppExport SEXP _FBCRM_CRM_RUNTRIAL(SEXP cohortSEXP, SEXP sampSEXP, SEXP ptrueSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP MSEXP, SEXP p_uSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< int >::type samp(sampSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ptrue(ptrueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type p_u(p_uSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(CRM_RUNTRIAL(cohort, samp, ptrue, p, sigma, mtd, M, p_u, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// FBCRM_MCMC
List FBCRM_MCMC(arma::vec X, arma::vec Y, arma::vec p, double p_rho, double sigma, double mtd, int B);
RcppExport SEXP _FBCRM_FBCRM_MCMC(SEXP XSEXP, SEXP YSEXP, SEXP pSEXP, SEXP p_rhoSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type p_rho(p_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(FBCRM_MCMC(X, Y, p, p_rho, sigma, mtd, B));
    return rcpp_result_gen;
END_RCPP
}
// FBCRM_RUNTRIAL
List FBCRM_RUNTRIAL(double cohort, double max_samp, arma::vec ptrue, arma::vec p, double p_rho, double sigma, double mtd, double p_u, double B, double M, double a, double b, double n);
RcppExport SEXP _FBCRM_FBCRM_RUNTRIAL(SEXP cohortSEXP, SEXP max_sampSEXP, SEXP ptrueSEXP, SEXP pSEXP, SEXP p_rhoSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP p_uSEXP, SEXP BSEXP, SEXP MSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< double >::type max_samp(max_sampSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ptrue(ptrueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type p_rho(p_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< double >::type p_u(p_uSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(FBCRM_RUNTRIAL(cohort, max_samp, ptrue, p, p_rho, sigma, mtd, p_u, B, M, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// BMACRM_RUNTRIAL
List BMACRM_RUNTRIAL(int cohort, int samp, arma::vec ptrue, arma::mat skel, double sigma, double mtd, int M, double p_u, double a, double b, double n);
RcppExport SEXP _FBCRM_BMACRM_RUNTRIAL(SEXP cohortSEXP, SEXP sampSEXP, SEXP ptrueSEXP, SEXP skelSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP MSEXP, SEXP p_uSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< int >::type samp(sampSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ptrue(ptrueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type skel(skelSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type p_u(p_uSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(BMACRM_RUNTRIAL(cohort, samp, ptrue, skel, sigma, mtd, M, p_u, a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// samp2
double samp2(double p, double k);
RcppExport SEXP _FBCRM_samp2(SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(samp2(p, k));
    return rcpp_result_gen;
END_RCPP
}
// TruncNormal
double TruncNormal(double lower, double upper, double mean, double var);
RcppExport SEXP _FBCRM_TruncNormal(SEXP lowerSEXP, SEXP upperSEXP, SEXP meanSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(TruncNormal(lower, upper, mean, var));
    return rcpp_result_gen;
END_RCPP
}
// MFBCRM_MCMC
List MFBCRM_MCMC(arma::vec X, arma::vec Y, arma::mat W, double p_rho, double sigma, double mtd, int B);
RcppExport SEXP _FBCRM_MFBCRM_MCMC(SEXP XSEXP, SEXP YSEXP, SEXP WSEXP, SEXP p_rhoSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type p_rho(p_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MFBCRM_MCMC(X, Y, W, p_rho, sigma, mtd, B));
    return rcpp_result_gen;
END_RCPP
}
// MFBCRM_RUNTRIAL
List MFBCRM_RUNTRIAL(double cohort, double max_samp, arma::vec ptrue, arma::mat W, double p_rho, double sigma, double mtd, double p_u, double B, double M, double a, double b, double n);
RcppExport SEXP _FBCRM_MFBCRM_RUNTRIAL(SEXP cohortSEXP, SEXP max_sampSEXP, SEXP ptrueSEXP, SEXP WSEXP, SEXP p_rhoSEXP, SEXP sigmaSEXP, SEXP mtdSEXP, SEXP p_uSEXP, SEXP BSEXP, SEXP MSEXP, SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cohort(cohortSEXP);
    Rcpp::traits::input_parameter< double >::type max_samp(max_sampSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ptrue(ptrueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type p_rho(p_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type mtd(mtdSEXP);
    Rcpp::traits::input_parameter< double >::type p_u(p_uSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MFBCRM_RUNTRIAL(cohort, max_samp, ptrue, W, p_rho, sigma, mtd, p_u, B, M, a, b, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FBCRM_abs1", (DL_FUNC) &_FBCRM_abs1, 1},
    {"_FBCRM_min1", (DL_FUNC) &_FBCRM_min1, 2},
    {"_FBCRM_max1", (DL_FUNC) &_FBCRM_max1, 2},
    {"_FBCRM_upper_bound", (DL_FUNC) &_FBCRM_upper_bound, 2},
    {"_FBCRM_lower_bound", (DL_FUNC) &_FBCRM_lower_bound, 2},
    {"_FBCRM_GetBoundaries_p", (DL_FUNC) &_FBCRM_GetBoundaries_p, 3},
    {"_FBCRM_TruncNormal_p", (DL_FUNC) &_FBCRM_TruncNormal_p, 4},
    {"_FBCRM_q_beta", (DL_FUNC) &_FBCRM_q_beta, 3},
    {"_FBCRM_myFac", (DL_FUNC) &_FBCRM_myFac, 1},
    {"_FBCRM_GammaFn", (DL_FUNC) &_FBCRM_GammaFn, 1},
    {"_FBCRM_BetaCDF", (DL_FUNC) &_FBCRM_BetaCDF, 3},
    {"_FBCRM_QBeta", (DL_FUNC) &_FBCRM_QBeta, 3},
    {"_FBCRM_TruncBeta", (DL_FUNC) &_FBCRM_TruncBeta, 5},
    {"_FBCRM_samp1", (DL_FUNC) &_FBCRM_samp1, 1},
    {"_FBCRM_VEC", (DL_FUNC) &_FBCRM_VEC, 1},
    {"_FBCRM_SampBinom", (DL_FUNC) &_FBCRM_SampBinom, 2},
    {"_FBCRM_getmin", (DL_FUNC) &_FBCRM_getmin, 1},
    {"_FBCRM_optdose", (DL_FUNC) &_FBCRM_optdose, 2},
    {"_FBCRM_LFBCRM1", (DL_FUNC) &_FBCRM_LFBCRM1, 4},
    {"_FBCRM_Lbeta1", (DL_FUNC) &_FBCRM_Lbeta1, 4},
    {"_FBCRM_randbeta", (DL_FUNC) &_FBCRM_randbeta, 2},
    {"_FBCRM_randnorm", (DL_FUNC) &_FBCRM_randnorm, 2},
    {"_FBCRM_non_zero", (DL_FUNC) &_FBCRM_non_zero, 1},
    {"_FBCRM_LM", (DL_FUNC) &_FBCRM_LM, 5},
    {"_FBCRM_LCRM", (DL_FUNC) &_FBCRM_LCRM, 4},
    {"_FBCRM_LCRM_1D", (DL_FUNC) &_FBCRM_LCRM_1D, 4},
    {"_FBCRM_dn", (DL_FUNC) &_FBCRM_dn, 2},
    {"_FBCRM_area", (DL_FUNC) &_FBCRM_area, 7},
    {"_FBCRM_areap", (DL_FUNC) &_FBCRM_areap, 7},
    {"_FBCRM_areap_d1", (DL_FUNC) &_FBCRM_areap_d1, 8},
    {"_FBCRM_CRM_MCMC", (DL_FUNC) &_FBCRM_CRM_MCMC, 8},
    {"_FBCRM_CRM_RUNTRIAL", (DL_FUNC) &_FBCRM_CRM_RUNTRIAL, 11},
    {"_FBCRM_FBCRM_MCMC", (DL_FUNC) &_FBCRM_FBCRM_MCMC, 7},
    {"_FBCRM_FBCRM_RUNTRIAL", (DL_FUNC) &_FBCRM_FBCRM_RUNTRIAL, 13},
    {"_FBCRM_BMACRM_RUNTRIAL", (DL_FUNC) &_FBCRM_BMACRM_RUNTRIAL, 11},
    {"_FBCRM_samp2", (DL_FUNC) &_FBCRM_samp2, 2},
    {"_FBCRM_TruncNormal", (DL_FUNC) &_FBCRM_TruncNormal, 4},
    {"_FBCRM_MFBCRM_MCMC", (DL_FUNC) &_FBCRM_MFBCRM_MCMC, 7},
    {"_FBCRM_MFBCRM_RUNTRIAL", (DL_FUNC) &_FBCRM_MFBCRM_RUNTRIAL, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_FBCRM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
